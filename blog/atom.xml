<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Deepak Karki</title>
 <link href="http://deepakkarki.github.io/blog/atom.xml" rel="self"/>
 <link href="http://deepakkarki.github.io/blog/"/>
 <updated>2015-09-23T20:54:41+05:30</updated>
 <id>http://deepakkarki.github.io</id>
 <author>
   <name>Deepak Karki</name>
   <email>deepak6k@gmail.com</email>
 </author>

 
 <entry>
   <title>Python and SSH</title>
   <link href="http://deepakkarki.github.io/2015/09/05/Python-and-ssh/"/>
   <updated>2015-09-05T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/09/05/Python-and-ssh</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
The &lt;a href=&quot;http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project/&quot;&gt;Hackend Project&lt;/a&gt; - Week 5
&lt;/div&gt;

&lt;p&gt;This week I worked on understanding the intricacies of SSH and how to automate tasks with Python. I used the aramiko library to handle SSH sessions in my program.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;(more details and code snippets later)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Responsive Design</title>
   <link href="http://deepakkarki.github.io/2015/08/30/Responsive-web-design/"/>
   <updated>2015-08-30T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/30/Responsive-web-design</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
The &lt;a href=&quot;http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project/&quot;&gt;Hackend Project&lt;/a&gt; - Week 4
&lt;/div&gt;

&lt;p&gt;This week I continued learning about responsive and beautiful websites. I will be putting my knowledge to the test as I take on the challenge of building my own jekyll blog template.&lt;/p&gt;

&lt;!--more--&gt;
</content>
 </entry>
 
 <entry>
   <title>Python C extensions</title>
   <link href="http://deepakkarki.github.io/2015/08/22/Python-C-extensions/"/>
   <updated>2015-08-22T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/22/Python-C-extensions</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
The &lt;a href=&quot;http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project/&quot;&gt;Hackend Project&lt;/a&gt; - Week 3
&lt;/div&gt;

&lt;p&gt;This week I learnt about and experemented with the various ways C code can be interfaced with python.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Three main techniques I covered were&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ctypes&lt;/li&gt;
  &lt;li&gt;SWIG&lt;/li&gt;
  &lt;li&gt;Python/C API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More info &lt;a href=&quot;https://github.com/deepakkarki/hackend-project/blob/master/week-4/Python-C-extensions.rst&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, my writeup got accepted as a chapter in the book &lt;a href=&quot;http://book.pythontips.com/en/latest/python_c_extension.html&quot;&gt;intermediate python&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Working with frontend design</title>
   <link href="http://deepakkarki.github.io/2015/08/15/Working-with-frontend-design/"/>
   <updated>2015-08-15T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/15/Working-with-frontend-design</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
The &lt;a href=&quot;http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project/&quot;&gt;Hackend Project&lt;/a&gt; - Week 2
&lt;/div&gt;

&lt;p&gt;This is my second hackend project - I dealt with developing responsive websites with HTML5 and CSS3. And no, there was no bootstrap.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Started off with understanding some HTML and CSS3 to make websites look great. Made a simple blog page and a landing page. Honestly found web dev a bit annoying at the start, but once it starts sinking in, you’ll be amazed with what you can create.&lt;/p&gt;

&lt;p&gt;(I should be attaching screenshots of what I did here….)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Viper - Python on bare metal</title>
   <link href="http://deepakkarki.github.io/2015/08/09/Playing-with-Viper/"/>
   <updated>2015-08-09T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/09/Playing-with-Viper</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
The &lt;a href=&quot;http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project/&quot;&gt;Hackend Project&lt;/a&gt; - Week 1
&lt;/div&gt;

&lt;p&gt;For my very first “Hackend” I combined two of my most favourite things - Embedded systems and Python! This weekend I dived through &lt;a href=&quot;http://www.viperize.it/&quot;&gt;VIPER&lt;/a&gt; - Viper is Python Embedded in Realtime (A funky recursive acronym).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h1&gt;
&lt;p&gt;Viper is a suite of software components that enable you, the developer to quickly develop embedded systems and IoT prototypes using Python. While it is surprising to find someone coding a micro-controller in python, they have really done a great job - seemingly better than earlier efforts such as &lt;a href=&quot;https://github.com/micropython/micropython&quot;&gt;Micro Python&lt;/a&gt; and &lt;a href=&quot;https://github.com/jsnyder/python-on-a-chip&quot;&gt;PyMite&lt;/a&gt;. The system is portable - works seamlessly on ARM M0-M4 MCUs and easily portable across most other MCUs. It’s extremely easy to get started -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the browser based IDE for your OS.&lt;/li&gt;
  &lt;li&gt;Open the IDE and connect the board - My Arduino Due automatically got listed.&lt;/li&gt;
  &lt;li&gt;Burn the Viper VM (one of the components that make up the suite) onto the target board.&lt;/li&gt;
  &lt;li&gt;Clone any of the available examples and execute them on your board.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/GXxFENWTcnSOeJIpAlFMRqOEqwr1ZUbqg4JAFkdmjQU=w2560-h1406-no&quot; alt=&quot;Viper IDE UI&quot; title=&quot;Viper IDE&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h1&gt;
&lt;p&gt;It’s really intriguing how someone could support a huge subset of python on a micro-controller system. Looking into their system design and code base, you can easily tell the effort that has gone behind this. Looking at it from an engineering perspective, there are two key components that make the magic happen -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The compiler that runs on the PC&lt;/li&gt;
  &lt;li&gt;The VM that runs on the embedded system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The compiler is written in python - and compiles the python (that you intend to execute on your micro-controller) into efficient byte code. This byte code is then streamed to to the micro-controller running the viper VM. The viper VM is built over ChibiOS (A realtime embedded OS) and is written in C. One thing I liked about this is the support for threads (priority based and premptive) - built over the ChibiOS threading system.&lt;/p&gt;

&lt;h1 id=&quot;what-i-learnt&quot;&gt;What I learnt&lt;/h1&gt;
&lt;p&gt;To be honest, I just got a high level overview of how things worked. I went through the source code of the components which run on the PC side, viz. the IDE and python byte code compiler, nothing too convoluted here. What I really wanted to do was play with the source code of the VM - but alas, that was not to be! The current code documentation is quite abysmal and good just for reference, I’d have to spend over a week before I figure &lt;em&gt;what is what&lt;/em&gt; in the source code!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Hackend Project</title>
   <link href="http://deepakkarki.github.io/2015/08/08/The-Hackend-Project/"/>
   <updated>2015-08-08T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/08/The-Hackend-Project</id>
   <content type="html">&lt;p&gt;If there was ever a specific reason I started this blog, this is it.
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what&quot;&gt;What?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The Hackend Project&lt;/strong&gt; is a simple concept - Every weekend pick a technology that you are not familiar with or a topic that you’d want to explore, and try to learn as much about it in a span of two days; and after the weekend you write a blog talking about what you learnt, and how others can go about learning the same thing if they wanted to. It’s as simple as that! As of now the Hackend Project is more of a personal thing, but soon I hope to build a community of like minded people who’d like to learn and share their experiences. The benefit is two fold -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ll be experimenting and learning something different every week and sharing that with the community.&lt;/li&gt;
  &lt;li&gt;The community will keep me going longer and I can build upon what others have tried and shared on their blog.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an added &lt;strong&gt;bonus&lt;/strong&gt;, I’ll be networking with brilliant folk, and maybe also find some neat opensource projects or ideas to work on. (If I’ve not already mentioned - I &lt;code&gt;love&lt;/code&gt; working on opensource technologies).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;only&lt;/em&gt; rule - CS related topics only.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;
&lt;p&gt;I recently just graduated from college and got hired by an &lt;a href=&quot;http://www.nutanix.com/&quot;&gt;amazing company&lt;/a&gt; where I work on core CS stuff such as distributed systems, datacenter networking, virtualization and cloud computing. As simple as that. As a student, I had a lot of free time to experiment with technology, try out new things and push them off as “mini-projects”. But one thing I have realized is that the industry environment is &lt;strong&gt;very&lt;/strong&gt; different from your everyday academic setting. You no longer have the free time to experiment on whatever you want with your friends. At work, along with the opportunity to work on real live scale systems comes the responsibility to meet deadlines and product goals. You stick one “tech stack” at work, and get comfortable at it. The Hackend Project gives me the freedom and opportunity to learn things that don’t fall into the spectrum of work. It could be anything for understanding python internals to understanding how linux containers work or trying out a new frontend MVC framework.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;message&quot;&gt;
Why not just learn stuff myself wherever I get free time and not call this a &quot;The Hackend Project&quot; (THP)?
&lt;/div&gt;

&lt;p&gt;Well, that’s what many people do. Heck! even I used to do that in college. But now I find a myriad of reasons on why this is a good idea:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Working alone is boring.&lt;/li&gt;
  &lt;li&gt;You tend to slack off and procrastinate when you say “I’ll learn this when I’m free later”. &lt;strong&gt;THP&lt;/strong&gt; gives you a reason to pull your socks up and get to hacking.&lt;/li&gt;
  &lt;li&gt;You can share experiences - So if you want to try something someone already has - you have a headstart. More importantly you know it can be completed in 2 days time.&lt;/li&gt;
  &lt;li&gt;If you really like the topic/technology, you can work on a “mini-project” sort of thing with other people who have played with it.&lt;/li&gt;
  &lt;li&gt;You don’t have to get distracted at work - this starts on a Saturday and ends on a Sunday. You can keep your head clutter free during the weekdays.&lt;/li&gt;
  &lt;li&gt;Blogging is cool. It’s cooler when you have a purpose and do it regularly. This is a good way of tracking what all you’ve learnt over a period of time and getting suggestions from others.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;warning&quot;&gt;Warning&lt;/h2&gt;
&lt;p&gt;Two days is an abysmal amount of time to learn something new, but learning has to start somewhere. The key point of &lt;strong&gt;THP&lt;/strong&gt; is to ensure that I don’t just stick to learning what I use at work - but also outside of it. If I like a topic I take up for the weekend - I’ll be sure to take it forward as an opensource project so as to get more of a hands on and in depth experience of the topic.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://deepakkarki.github.io/2015/08/07/Dummy-Post/"/>
   <updated>2015-08-07T00:00:00+05:30</updated>
   <id>http://deepakkarki.github.io/blog/2015/08/07/Dummy-Post</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  This is a dummy post to just test the various features provided on this theme. This will also serve as a quick lookup for any mark down option that I&#39;ll be needing ;)
&lt;/div&gt;

&lt;!--more--&gt;
&lt;p&gt;Here is a &lt;a href=&quot;#&quot;&gt;link&lt;/a&gt;, and a word in &lt;em&gt;italics&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello quoted text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that was a &lt;strong&gt;bold&lt;/strong&gt; move. Some vicious HTML managed to &lt;code&gt;&amp;lt;h1&amp;gt;Escape&amp;lt;/h1&amp;gt;&lt;/code&gt;. And that is how you get plain texts even in markdown.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;
&lt;p&gt;Some more random text under a heading with 2 #’s.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;because JavaScript.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return a + b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;A list of lists.&lt;/p&gt;

&lt;p&gt;Lets start off!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;blah&lt;/li&gt;
  &lt;li&gt;bleh&lt;/li&gt;
  &lt;li&gt;bluh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now for some &lt;em&gt;law&lt;/em&gt; and &lt;strong&gt;order&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Foo&lt;/li&gt;
  &lt;li&gt;Bar&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Thunk calls&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lists and their indentation - let’s use some &lt;code&gt;&amp;lt;dl&amp;gt;, &amp;lt;dt&amp;gt; and &amp;lt;dd&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;These are HTML tables :( I want my github flavoured markdown :(&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
